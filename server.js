// ============================================================
// üöÄ Downloader Tools Server
// - HTML Downloader
// - Scratch SB3 Downloader
// ============================================================

const express = require("express");
const axios = require("axios");
const fs = require("fs");
const path = require("path");
const archiver = require("archiver");
const app = express();

// ------------------------------------------------------------
// üìÇ Âü∫Êú¨Ë®≠ÂÆö
// ------------------------------------------------------------
app.use(express.urlencoded({ extended: true }));
app.use(express.static("public")); // public„Éï„Ç©„É´„ÉÄÂÜÖ„ÅÆÈùôÁöÑ„Éï„Ç°„Ç§„É´„ÇíÈÖç‰ø°

// „É°„Ç§„É≥„Éö„Éº„Ç∏
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// ============================================================
// üß± HTML Downloader Ê©üËÉΩ
// ============================================================
app.post("/download", async (req, res) => {
  const { url } = req.body;

  if (!url) {
    return res.send("URL„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
  }

  try {
    const safeFileName = url.replace(/[^a-z0-9]/gi, "_") + ".html";
    const filePath = path.join(__dirname, safeFileName);

    const response = await axios.get(url, { responseType: "arraybuffer" });
    const html = response.data.toString("utf8");

    fs.writeFileSync(filePath, html, "utf8");

    res.download(filePath, safeFileName, (err) => {
      if (err) console.error("„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Ç®„É©„Éº:", err);

      // ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´ÂâäÈô§
      setTimeout(() => {
        fs.unlink(filePath, (err) => {
          if (err) console.error("ÂâäÈô§„Ç®„É©„Éº:", err);
        });
      }, 1000);
    });
  } catch (err) {
    console.error("[HTML ERROR]", err.message);
    res.send("HTML„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇURL„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
  }
});

// ============================================================
// üß© Scratch SB3 Downloader Ê©üËÉΩ
// ============================================================
app.get("/scratch-download/:projectId", async (req, res) => {
  const projectId = req.params.projectId;
  const metaUrl = `https://api.scratch.mit.edu/projects/${projectId}`;
  const tempDir = path.join(__dirname, "temp", projectId);
  const jsonPath = path.join(tempDir, "project.json");
  const sb3Path = path.join(tempDir, "project.sb3");

  try {
    await fs.promises.mkdir(tempDir, { recursive: true });

    // üîπ Step 1: „É°„Çø„Éá„Éº„ÇøÂèñÂæó
    const metaRes = await axios.get(metaUrl);
    const meta = metaRes.data;
    const token = meta.project_token;

    if (!token) {
      return res
        .status(400)
        .send("„Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØÂÖ¨Èñã„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åã„ÄÅÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„ÄÇ");
    }

    // üîπ Step 2: JSON„Éá„Éº„ÇøÂèñÂæó
    const projectUrl = `https://projects.scratch.mit.edu/${projectId}?token=${token}`;
    const projectRes = await axios.get(projectUrl);
    const projectJson = projectRes.data;

    // üîπ Step 3: JSON„Çí‰øùÂ≠ò
    await fs.promises.writeFile(jsonPath, JSON.stringify(projectJson, null, 2));

    // üîπ Step 4: ZIP„Çí‰ΩúÊàê„Åó„Å¶sb3„Å´Â§âÊèõ
    const output = fs.createWriteStream(sb3Path);
    const archive = archiver("zip");
    archive.pipe(output);
    archive.file(jsonPath, { name: "project.json" });
    await archive.finalize();

    output.on("close", async () => {
      res.download(sb3Path, `scratch-project-${projectId}.sb3`, async (err) => {
        if (err) console.error(err);
        await fs.promises.rm(tempDir, { recursive: true, force: true });
      });
    });
  } catch (err) {
    console.error("[Scratch Error]", err.message);
    res
      .status(500)
      .send("Scratch„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Éó„É≠„Ç∏„Çß„ÇØ„ÉàID„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
  }
});

// ============================================================
// üöÄ „Çµ„Éº„Éê„ÉºËµ∑Âãï
// ============================================================
const PORT = process.env.PORT || 8080;
app.listen(PORT, () => {
  console.log(`‚úÖ „Çµ„Éº„Éê„ÉºËµ∑Âãï‰∏≠: http://localhost:${PORT}`);
  console.log(" - HTML Downloader: / (POST /download)");
  console.log(" - Scratch SB3 Downloader: /scratch-download/:projectId");
});
